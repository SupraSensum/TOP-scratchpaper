* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

.menu-container {
    color: #fff;
    background-color: #5995DA; /* Blue */
    padding: 20px 0;
    display: flex;
    justify-content: center;
}

.menu {
    width: 900px;
    display: flex;
    justify-content: space-between;
}

.links {
    display: flex;
    justify-content: flex-end;
}

.login {
    margin-left: 20px;
}

.header-container {
    color: #5995DA;
    background-color: #D6E9FE;
    display: flex;
    justify-content: center;
}

.header {
    width: 900px;
    height: 300px;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.photo-grid-container {
    display: flex;
    justify-content: center;
}

.photo-grid {
    width: 900px;
    display: flex;
    justify-content: center;
    flex-wrap: wrap;
    flex-direction: row;
    align-items: center;
}

.first-item {
    order: 1;
}

.last-item {
    order: -1;
}

.photo-grid-item {
    border: 1px solid #fff;
    width: 300px;
    height: 300px;
}

.social,
.subscribe {
    align-self: flex-end;
    margin-bottom: 20px;
}

.footer {
    display: flex;
    justify-content: space-between;
}

.footer-item {
    border: 1px solid #fff;
    background-color:#D6E9FE;
    height: 200px;
    flex: 1;
}

.footer-one,
.footer-three {
    background-color: #5995DA;
    flex: initial;
    width: 300px;
}

.signup {
    margin-left: auto;
}

/* Summary of all the things we learned with the tools inside flexbox:

    - Use display: flex; to create a flex container.
    - Use justify-content to define the horizontal alignment of items.
    - Use align-items to define the vertical alignment of items.
    - Use flex-direction if you need columns instead of rows.
    - Use the row-reverse or column-reverse values to flip item order.
    - Use order to customize the order of individual elements.
    - Use align-self to vertically align individual items.
    - Use flex to create flexible boxes that can stretch and shrink. 
    
    Remember that these flexbox properties are just a language 
    that lets you tell browsers how to arrange a bunch of HTML 
    elements. The hard part isn’t actually writing the HTML and 
    CSS code, it’s figuring out, conceptually (on a piece of 
    paper), the behavior of all the necessary boxes to create 
    a given layout.

    When a designer hands you a mockup to implement, your first 
    task is to draw a bunch of boxes on it and determine how 
    they’re supposed to stack, stretch, and shrink to achieve 
    the desired design. Once you’ve got that done, it should be 
    pretty easy to code it up using these new flexbox techniques.

    The flexbox layout mode should be used for most of your web 
    pages, but there are some things it’s not-so-good at, like 
    gently tweaking element positions and preventing them from 
    interacting with the rest of the page.*/